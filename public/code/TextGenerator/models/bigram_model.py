import torch
import torch.nn as nn
from models.base_model import BaseLanguageModel
from utils import decode_data
from typing import Any


class BigramLanguageModel(BaseLanguageModel):
    """
    A bigram language model that predicts the next character in a sequence.

    Architecture:
        - Single embedding layer that directly maps characters to their
          next character probabilities
        - No memory of previous context beyond the current character

    This is a simple baseline model that only considers the previous character
    when making predictions.

    Attributes:
        batch_size (int): Batch size for training and inference.
        block_size (int): Length of input sequences.
        lr (float): Learning rate.
        embedding (nn.Embedding): Embedding layer for character tokens.
        config["hparams"] keys: config.json hparams attributes.
            (type-hinted above __init__)

    Notes:
        Keys in config["hparams"] are attributes set dynamically at initialization.
    """

    batch_size: int
    block_size: int
    lr: float

    def __init__(self, config: dict[str, Any], cfg_path: str, vocab_size: int) -> None:
        """
        Initialize the bigram model and its parameters.

        Args:
            config (dict): Configuration dictionary for the model.
            cfg_path (str): Path to the config file.
            vocab_size (int): Number of unique tokens in the vocabulary.
        """
        super().__init__(
            model_name="bigram",
            config=config,
            cfg_path=cfg_path,
            vocab_size=vocab_size,
        )

        # Set all hparams config keys as attributes
        for key, value in config.get("hparams", {}).items():
            setattr(self, key, value)

        # Each character gets a vector of size vocab_size
        # Character predictions are learned via probability distribution
        self.embedding = nn.Embedding(vocab_size, vocab_size)

    def __repr__(self) -> str:
        """
        Returns:
            str: String representation of the model.
        """
        output = f"BigramLanguageModel(\n\tvocab_size={self.vocab_size}\n)"
        return output.expandtabs(4)

    def forward(
        self, idx: torch.Tensor, targets: torch.Tensor | None = None
    ) -> tuple[torch.Tensor, torch.Tensor | None]:
        """
        Compute logits and loss for input indices and targets.

        Args:
            idx (torch.Tensor): Input token indices of shape (B, T).
            targets (torch.Tensor, optional): Target token indices of shape (B, T).

        Returns:
            tuple: (logits, loss) where:
                - logits: Model predictions of shape (B, T, vocab_size)
                - loss: Cross entropy loss if targets provided, None otherwise
        """
        # (B, T, vocab_size): map indices to logits for next character prediction
        logits = self.embedding(idx)
        logits, loss = self.compute_loss(idx, logits, targets)

        return logits, loss

    @torch.no_grad()
    def generate(
        self,
        start_idx: int,
        itos: dict[int, str],
        max_new_tokens: int,
    ) -> str:
        """
        Generate new text by sampling from the model's predictions.
        Uses multinomial sampling to add randomness to the output.
        Starts from a seed index and generates max_new_tokens characters.

        Args:
            start_idx (int): Index of the initial character to start generation.
            itos (dict[int, str]): Mapping from indices to characters.
            max_new_tokens (int): Number of new tokens to generate.

        Returns:
            str: The decoded string generated by the model.
        """
        self.eval()
        idx = torch.tensor([[start_idx]], dtype=torch.long, device=self.device)
        generated = torch.tensor([start_idx], dtype=torch.long, device=self.device)

        for _ in range(max_new_tokens):
            # Get predictions for next step
            logits, _ = self(idx)
            next_idx = self.new_token(logits)
            generated = torch.cat((generated, next_idx.flatten()), dim=0)

        return decode_data(generated, itos)
